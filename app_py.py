# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Syi9p2bLvsTw-UjHAFy6m4CE6Ha0EuES
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/satvik314/educhain.git
# %cd educhain
!pip install -e .
!ls educhain
from educhain import core
!cat setup.py





import os
from educhain import Educhain

# âœ… REQUIRED for OpenRouter
os.environ["OPENAI_API_KEY"] = "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"  # your OpenRouter key
os.environ["OPENAI_API_BASE"] = "https://openrouter.ai/api/v1"
os.environ["EDUCHAIN_MODEL"] = "openrouter/llama3"

client = Educhain()

questions = client.qna_engine.generate_questions(
    topic="Cloud Computing",
    num=3
)

for q in questions.questions:  # access the list inside MCQList
    print("Q:", q.question)
    print("Options:", q.options)
    print("Answer:", q.answer)
    print("Explanation:", q.explanation)
    print()

!pip install feedparser
import feedparser

def get_latest_news(feed_url, max_items=5):
    feed = feedparser.parse(feed_url)
    entries = feed.entries[:max_items]
    return [(entry.title, entry.summary) for entry in entries]

import feedparser

def get_latest_news(feed_url, max_items=5):
    feed = feedparser.parse(feed_url)
    entries = feed.entries[:max_items]
    return [(entry.title, entry.summary) for entry in entries]

# Example usage
news = get_latest_news("https://techcrunch.com/feed/", 3)
for title, summary in news:
    print("Title:", title)
    print("Summary:", summary[:200], "...\n")

import requests
import feedparser
import os
from educhain import Educhain

# Your OpenRouter API key and base
API_KEY = "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"
API_BASE = "https://openrouter.ai/api/v1"

# Set environment for Educhain
os.environ["OPENAI_API_KEY"] = API_KEY
os.environ["OPENAI_API_BASE"] = API_BASE
os.environ["EDUCHAIN_MODEL"] = "openrouter/llama3"

# Educhain client
educhain_client = Educhain()

def generate_summary(text):
    url = f"{API_BASE}/chat/completions"
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",  # fixed here
        "messages": [{"role": "user", "content": f"Summarize the following text briefly:\n\n{text}"}],
        "max_tokens": 150,
        "temperature": 0.3
    }
    resp = requests.post(url, headers=headers, json=data)
    resp.raise_for_status()
    return resp.json()["choices"][0]["message"]["content"].strip()


def get_latest_news(feed_url, max_items=3):
    feed = feedparser.parse(feed_url)
    entries = feed.entries[:max_items]
    return [(entry.title, entry.summary) for entry in entries]

def generate_flashcards(text, num=3):
    mcqs = educhain_client.qna_engine.generate_questions(topic=text, num=num)
    return mcqs.questions

# Demo run
feed_url = "https://techcrunch.com/feed/"
news = get_latest_news(feed_url, 3)

for idx, (title, content) in enumerate(news, 1):
    print(f"Article {idx}: {title}\n")

    summary = generate_summary(content)
    print(f"Summary:\n{summary}\n")

    flashcards = generate_flashcards(content)
    print("Flashcards:")
    for card in flashcards:
        print(f"Q: {card.question}")
        for opt in card.options:
            print(f" - {opt}")
        print(f"Answer: {card.answer}\n")
    print("-----\n")

!pip install streamlit

import streamlit as st
import requests
import feedparser
import os
from educhain import Educhain

# Setup keys (better use secrets in real apps)
API_KEY = "sk-or-v1-..."
API_BASE = "https://openrouter.ai/api/v1"
os.environ["OPENAI_API_KEY"] = API_KEY
os.environ["OPENAI_API_BASE"] = API_BASE
os.environ["EDUCHAIN_MODEL"] = "openrouter/llama3"

educhain_client = Educhain()

def generate_summary(text):
    url = f"{API_BASE}/chat/completions"
    headers = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": f"Summarize the following text briefly:\n\n{text}"}],
        "max_tokens": 150,
        "temperature": 0.3
    }
    resp = requests.post(url, headers=headers, json=data)
    resp.raise_for_status()
    return resp.json()["choices"][0]["message"]["content"].strip()

def get_latest_news(feed_url, max_items=3):
    feed = feedparser.parse(feed_url)
    entries = feed.entries[:max_items]
    return [(entry.title, entry.summary) for entry in entries]

def generate_flashcards(text, num=3):
    mcqs = educhain_client.qna_engine.generate_questions(topic=text, num=num)
    return mcqs.questions

# Streamlit UI
st.title("TechDigest AI - News Summarizer & Flashcards")

feed_url = st.selectbox("Select news source", ["https://techcrunch.com/feed/", "https://news.ycombinator.com/rss"])
num_articles = st.slider("Number of articles", min_value=1, max_value=5, value=3)

if st.button("Fetch & Summarize"):
    news = get_latest_news(feed_url, num_articles)
    for idx, (title, content) in enumerate(news, 1):
        st.subheader(f"{idx}. {title}")
        summary = generate_summary(content)
        st.write(f"**Summary:** {summary}")
        st.write("**Flashcards:**")
        flashcards = generate_flashcards(content)
        for card in flashcards:
            st.markdown(f"- **Q:** {card.question}")
            for opt in card.options:
                st.markdown(f"    - {opt}")
            st.markdown(f"  - **Answer:** {card.answer}")
        st.markdown("---")